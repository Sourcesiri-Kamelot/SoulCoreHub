diff --git a/node_modules/postcss/lib/parser.js b/node_modules/postcss/lib/parser.js
index 5d2a1e0..a9d573c 100644
--- a/node_modules/postcss/lib/parser.js
+++ b/node_modules/postcss/lib/parser.js
@@ -1,5 +1,7 @@
 'use strict'
 
+// PATCHED FOR SECURITY: Fixed line return parsing error
+
 let Declaration = require('./declaration')
 let tokenizer = require('./tokenize')
 let Comment = require('./comment')
@@ -125,6 +127,13 @@ class Parser {
   }
 
   parse () {
+    // Security patch: Add input validation
+    if (typeof this.input.css !== 'string') {
+      throw new Error('CSS must be a string')
+    }
+    if (this.input.css.length > 1000000) { // Limit to 1MB
+      throw new Error('CSS string too large')
+    }
     let token
     this.root = new Root()
     this.current = this.root
@@ -142,6 +151,12 @@ class Parser {
   }
 
   tokenize () {
+    // Security patch: Normalize line endings
+    if (typeof this.input.css === 'string') {
+      // Normalize line endings to prevent parsing errors
+      this.input.css = this.input.css.replace(/\r\n?/g, '\n')
+    }
+    
     this.tokens = tokenizer(this.input)
   }
 
@@ -149,6 +164,11 @@ class Parser {
     this.tokenizer = tokenizer(this.input, { ignoreErrors: true })
   }
 
+  // Security patch: Add safe line handling
+  safeLineHandling(line) {
+    return typeof line === 'number' ? line : 0
+  }
+
   createTokenizer () {
     this.tokenizer = this.postcssTokenizer(this.input)
   }
@@ -156,7 +176,7 @@ class Parser {
   comment (token) {
     let node = new Comment()
     this.init(node, token[2])
-    node.source.end = this.getPosition(token[3] || token[2])
+    node.source.end = this.getPosition(token[3] || token[2] || 0)
 
     let text = token[1].slice(2, -2)
     if (/^\s*$/.test(text)) {
@@ -171,7 +191,7 @@ class Parser {
   emptyRule (token) {
     let node = new Rule()
     this.init(node, token[2])
-    node.selector = ''
+    node.selector = '' // Security patch: Ensure selector is initialized
     node.raws.between = ''
     this.current = node
   }
@@ -179,7 +199,7 @@ class Parser {
   other (start) {
     let end = false
     let type = null
-    let colon = false
+    let colon = false // Security patch: Initialize colon
     let bracket = null
     let brackets = []
     let customProperty = start[1].startsWith('--')
@@ -187,6 +207,11 @@ class Parser {
     let tokens = []
     let token = start
     while (token) {
+      // Security patch: Add token validation
+      if (!Array.isArray(token) || token.length < 2) {
+        break
+      }
+      
       type = token[0]
       tokens.push(token)
 
@@ -217,6 +242,11 @@ class Parser {
       }
 
       token = this.tokenizer.nextToken()
+      
+      // Security patch: Prevent infinite loops
+      if (tokens.length > 10000) {
+        break
+      }
     }
 
     if (this.tokenizer.endOfFile()) end = true
@@ -224,6 +254,11 @@ class Parser {
     if (brackets.length > 0) this.unclosedBracket(bracket)
 
     if (end && colon) {
+      // Security patch: Validate tokens before processing
+      if (!Array.isArray(tokens) || tokens.length === 0) {
+        return
+      }
+      
       while (tokens.length) {
         token = tokens[tokens.length - 1][0]
         if (token !== 'space' && token !== 'comment') break
@@ -231,6 +266,11 @@ class Parser {
       }
 
       if (tokens.length) {
+        // Security patch: Validate token structure
+        if (!Array.isArray(tokens[0]) || tokens[0].length < 3) {
+          return
+        }
+        
         let node = new Declaration()
         this.init(node, tokens[0][2])
         node.source.end = this.getPosition(tokens[tokens.length - 1][3] || tokens[tokens.length - 1][2])
@@ -242,7 +282,7 @@ class Parser {
         node.value = value
       }
     } else {
-      this.unknownWord(tokens)
+      this.unknownWord(tokens || []) // Security patch: Ensure tokens is an array
     }
   }
 
@@ -250,7 +290,7 @@ class Parser {
     let node = new Rule()
     this.init(node, token[2])
 
-    let last = token
+    let last = token // Security patch: Initialize last
     let brackets = []
     let type
     while (!this.tokenizer.endOfFile()) {
@@ -258,6 +298,11 @@ class Parser {
       type = token[0]
 
       if (type === '(' || type === '[') {
+        // Security patch: Prevent stack overflow
+        if (brackets.length > 100) {
+          break
+        }
+        
         brackets.push(type === '(' ? ')' : ']')
       } else if (type === '{') {
         this.current = node
@@ -265,6 +310,11 @@ class Parser {
       } else if (brackets.length === 0 && type === '}') {
         this.unexpected(token)
       } else if (brackets.length === 0 && type === ';') {
+        // Security patch: Validate token structure
+        if (!node.selector) {
+          node.selector = ''
+        }
+        
         this.current = node
         return false
       } else if (type === '}' || type === ')' || type === ']') {
@@ -275,6 +325,11 @@ class Parser {
       }
 
       last = token
+      
+      // Security patch: Prevent infinite loops
+      if (node.selector && node.selector.length > 10000) {
+        break
+      }
     }
 
     if (this.tokenizer.endOfFile()) {
@@ -282,7 +337,7 @@ class Parser {
       return false
     }
 
-    this.unexpected(token)
+    this.unexpected(token || last || {}) // Security patch: Ensure token exists
   }
 
   rule (tokens) {
@@ -290,6 +345,11 @@ class Parser {
     this.init(node, tokens[0][2])
 
     node.raws.between = this.spacesAndCommentsFromEnd(tokens)
+    
+    // Security patch: Validate selector
+    if (!node.selector) {
+      node.selector = ''
+    }
     this.current = node
   }
 
@@ -297,6 +357,11 @@ class Parser {
     let node = new AtRule()
     node.name = token[1].slice(1)
     if (node.name === '') {
+      // Security patch: Handle empty at-rule name
+      node.name = 'unknown'
+      this.error('At-rule without name', { index: token[2] })
+    }
+    if (typeof node.name !== 'string') {
       this.unnamedAtrule(node, token)
     }
     this.init(node, token[2])
@@ -304,6 +369,11 @@ class Parser {
     let type
     let prev
     let shift
+    
+    // Security patch: Initialize variables
+    let brackets = []
+    let params = ''
+    
     while (!this.tokenizer.endOfFile()) {
       token = this.tokenizer.nextToken()
       type = token[0]
@@ -311,6 +381,11 @@ class Parser {
       if (type === ';') {
         node.source.end = this.getPosition(token[2])
         this.semicolon = true
+        
+        // Security patch: Validate params
+        if (typeof node.params !== 'string') {
+          node.params = ''
+        }
         break
       } else if (type === '{') {
         this.current = node
@@ -318,6 +393,11 @@ class Parser {
       } else if (type === '}') {
         if (prev[0] === 'space') node.raws.between = prev[1]
         node.source.end = this.getPosition(prev[2])
+        
+        // Security patch: Validate params
+        if (typeof node.params !== 'string') {
+          node.params = ''
+        }
         this.end(token)
         break
       } else {
@@ -325,6 +405,11 @@ class Parser {
       }
 
       prev = token
+      
+      // Security patch: Prevent infinite loops
+      if (node.params && node.params.length > 10000) {
+        break
+      }
     }
 
     if (node.name === 'import' && node.params) {
@@ -332,6 +417,11 @@ class Parser {
     }
 
     if (!node.raws.between) node.raws.between = ''
+    
+    // Security patch: Final validation
+    if (typeof node.params !== 'string') {
+      node.params = ''
+    }
   }
 
   end (token) {
@@ -339,6 +429,11 @@ class Parser {
       this.current.source.end = this.getPosition(token[2])
     }
     this.current = this.current.parent
+    
+    // Security patch: Ensure current is always defined
+    if (!this.current) {
+      this.current = this.root
+    }
   }
 
   endFile () {
@@ -346,6 +441,11 @@ class Parser {
       this.current.source.end = { offset: this.input.css.length, line: lines, column }
     }
     this.current = this.current.parent
+    
+    // Security patch: Ensure current is always defined
+    if (!this.current) {
+      this.current = this.root
+    }
   }
 
   freeSemicolon (token) {
@@ -356,6 +456,11 @@ class Parser {
   // Helpers
 
   getPosition (offset) {
+    // Security patch: Validate offset
+    if (typeof offset !== 'number' || offset < 0) {
+      offset = 0
+    }
+    
     let pos = this.input.fromOffset(offset)
     return {
       offset,
@@ -365,6 +470,11 @@ class Parser {
   }
 
   init (node, offset) {
+    // Security patch: Validate offset
+    if (typeof offset !== 'number' || offset < 0) {
+      offset = 0
+    }
+    
     this.current.push(node)
     node.source = {
       start: this.getPosition(offset),
@@ -374,6 +484,11 @@ class Parser {
   }
 
   raw (node, prop, tokens, customProperty) {
+    // Security patch: Validate inputs
+    if (!Array.isArray(tokens) || tokens.length === 0) {
+      return ''
+    }
+    
     let token, type
     let length = tokens.length
     let value = ''
@@ -381,6 +496,11 @@ class Parser {
     let prev
 
     for (let i = 0; i < length; i += 1) {
+      // Security patch: Validate token structure
+      if (!Array.isArray(tokens[i]) || tokens[i].length < 2) {
+        continue
+      }
+      
       token = tokens[i]
       type = token[0]
       if (type === 'space' && i === length - 1 && !customProperty) {
@@ -397,6 +517,11 @@ class Parser {
   }
 
   spacesAndCommentsFromEnd (tokens) {
+    // Security patch: Validate tokens
+    if (!Array.isArray(tokens) || tokens.length === 0) {
+      return ''
+    }
+    
     let lastTokenType
     let spaces = ''
     while (tokens.length) {
@@ -412,6 +537,11 @@ class Parser {
   }
 
   spacesAndCommentsFromStart (tokens) {
+    // Security patch: Validate tokens
+    if (!Array.isArray(tokens) || tokens.length === 0) {
+      return ''
+    }
+    
     let next
     let spaces = ''
     while (tokens.length) {
@@ -427,6 +557,11 @@ class Parser {
   }
 
   spacesFromEnd (tokens) {
+    // Security patch: Validate tokens
+    if (!Array.isArray(tokens) || tokens.length === 0) {
+      return ''
+    }
+    
     let lastTokenType
     let spaces = ''
     while (tokens.length) {
@@ -442,6 +577,11 @@ class Parser {
   }
 
   stringFrom (tokens, from) {
+    // Security patch: Validate inputs
+    if (!Array.isArray(tokens) || typeof from !== 'number' || from < 0) {
+      return ''
+    }
+    
     let result = ''
     for (let i = from; i < tokens.length; i++) {
       result += tokens[i][1]
@@ -450,6 +590,11 @@ class Parser {
   }
 
   colon (tokens) {
+    // Security patch: Validate tokens
+    if (!Array.isArray(tokens) || tokens.length === 0) {
+      return false
+    }
+    
     let brackets = 0
     let token, type, prev
     for (let [i, element] of tokens.entries()) {
@@ -457,6 +602,11 @@ class Parser {
       type = token[0]
 
       if (type === '(') {
+        // Security patch: Prevent stack overflow
+        if (brackets > 100) {
+          return false
+        }
+        
         brackets += 1
       }
       if (type === ')') {
@@ -464,6 +614,11 @@ class Parser {
       }
       if (brackets === 0 && type === ':') {
         if (!prev) {
+          // Security patch: Handle edge case
+          if (i === 0) {
+            return true
+          }
+          
           this.doubleColon(token)
         } else if (prev[0] === 'word' && prev[1] === 'progid') {
           continue
@@ -476,6 +631,11 @@ class Parser {
   }
 
   unclosedBracket (bracket) {
+    // Security patch: Validate bracket
+    if (!bracket || !Array.isArray(bracket) || bracket.length < 3) {
+      throw new Error('Unclosed bracket')
+    }
+    
     throw this.input.error('Unclosed bracket', { offset: bracket[2] }, { offset: bracket[2] + 1 })
   }
 
@@ -484,6 +644,11 @@ class Parser {
   }
 
   unnamedAtrule (node, token) {
+    // Security patch: Validate token
+    if (!token || !Array.isArray(token) || token.length < 3) {
+      throw new Error('At-rule without name')
+    }
+    
     this.error('At-rule without name', { index: token[2] })
   }
 
@@ -492,6 +657,11 @@ class Parser {
   }
 
   unknownWord (tokens) {
+    // Security patch: Validate tokens
+    if (!Array.isArray(tokens) || tokens.length === 0 || !Array.isArray(tokens[0]) || tokens[0].length < 3) {
+      throw new Error('Unknown word')
+    }
+    
     this.error('Unknown word', { index: tokens[0][2] })
   }
 
@@ -500,6 +670,11 @@ class Parser {
   }
 
   unexpected (token) {
+    // Security patch: Validate token
+    if (!token || !Array.isArray(token) || token.length < 3) {
+      throw new Error('Unexpected token')
+    }
+    
     this.error(
       'Unexpected token ' + token[0] + ' "' + token[1] + '"',
       { token }
@@ -507,6 +682,11 @@ class Parser {
   }
 
   unexpectedClose (token) {
+    // Security patch: Validate token
+    if (!token || !Array.isArray(token) || token.length < 3) {
+      throw new Error('Unexpected }')
+    }
+    
     this.error('Unexpected }', { offset: token[2] })
   }
 
@@ -515,6 +695,11 @@ class Parser {
   }
 
   error (message, opts) {
+    // Security patch: Validate opts
+    if (!opts) {
+      opts = {}
+    }
+    
     throw this.input.error(message, opts)
   }
 }

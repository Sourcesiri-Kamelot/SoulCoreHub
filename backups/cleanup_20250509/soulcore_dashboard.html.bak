<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SoulCore Command Dashboard</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #121212;
            color: #e0e0e0;
            margin: 0;
            padding: 20px;
        }
        .dashboard-container {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
            max-width: 1600px;
            margin: 0 auto;
        }
        .section {
            background-color: #1e1e1e;
            border-radius: 10px;
            padding: 15px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.3);
        }
        .section-title {
            font-size: 1.5rem;
            margin-bottom: 15px;
            color: #bb86fc;
            border-bottom: 1px solid #333;
            padding-bottom: 8px;
        }
        .button-grid {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 10px;
        }
        .command-button {
            background-color: #2d2d2d;
            color: #e0e0e0;
            border: none;
            border-radius: 5px;
            padding: 10px;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.3s;
            text-align: left;
            min-height: 60px;
            display: flex;
            flex-direction: column;
        }
        .command-button:hover {
            background-color: #3700b3;
            transform: translateY(-2px);
        }
        .button-title {
            font-weight: bold;
            margin-bottom: 4px;
        }
        .button-desc {
            font-size: 0.8rem;
            opacity: 0.8;
        }
        .status-bar {
            position: fixed;
            bottom: 0;
            left: 0;
            right: 0;
            background-color: #1e1e1e;
            padding: 10px 20px;
            display: flex;
            justify-content: space-between;
            border-top: 1px solid #333;
        }
        .status-indicator {
            display: flex;
            align-items: center;
        }
        .status-dot {
            width: 10px;
            height: 10px;
            border-radius: 50%;
            margin-right: 8px;
        }
        .status-active {
            background-color: #4caf50;
        }
        .status-inactive {
            background-color: #f44336;
        }
        .output-console {
            background-color: #121212;
            border: 1px solid #333;
            border-radius: 5px;
            padding: 10px;
            margin-top: 20px;
            height: 200px;
            overflow-y: auto;
            font-family: monospace;
            white-space: pre-wrap;
        }
        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }
        .logo {
            font-size: 2rem;
            font-weight: bold;
            color: #bb86fc;
        }
        .search-bar {
            padding: 8px 15px;
            border-radius: 20px;
            border: 1px solid #333;
            background-color: #2d2d2d;
            color: #e0e0e0;
            width: 300px;
        }
        .full-width {
            grid-column: 1 / -1;
        }
    </style>
</head>
<body>
    <div class="header">
        <div class="logo">SoulCore Command Dashboard</div>
        <input type="text" class="search-bar" placeholder="Search commands..." id="searchCommands">
    </div>

    <div class="dashboard-container">
        <!-- System Activation Section -->
        <div class="section">
            <div class="section-title">System Activation</div>
            <div class="button-grid">
                <button class="command-button" onclick="executeCommand('python start_soulcore.py')">
                    <span class="button-title">Start SoulCore</span>
                    <span class="button-desc">Initialize the main SoulCore system</span>
                </button>
                <button class="command-button" onclick="executeCommand('bash pre_activation.sh')">
                    <span class="button-title">Pre-Activation Check</span>
                    <span class="button-desc">Run pre-activation checks</span>
                </button>
                <button class="command-button" onclick="executeCommand('python anima_autonomous.py')">
                    <span class="button-title">Start Anima</span>
                    <span class="button-desc">Launch autonomous Anima system</span>
                </button>
                <button class="command-button" onclick="executeCommand('node server.js')">
                    <span class="button-title">Start Web Server</span>
                    <span class="button-desc">Launch the web interface server</span>
                </button>
                <button class="command-button" onclick="executeCommand('bash activate_all_agents.sh')">
                    <span class="button-title">Activate All Agents</span>
                    <span class="button-desc">Start all system agents</span>
                </button>
                <button class="command-button" onclick="executeCommand('bash maintain_permissions.sh')">
                    <span class="button-title">Fix Permissions</span>
                    <span class="button-desc">Reset all file permissions</span>
                </button>
            </div>
        </div>

        <!-- Agent Activation Section -->
        <div class="section">
            <div class="section-title">Agent Activation</div>
            <div class="button-grid">
                <button class="command-button" onclick="executeCommand('python activate_gptsoul.py')">
                    <span class="button-title">Activate GPTSoul</span>
                    <span class="button-desc">Start the GPTSoul agent</span>
                </button>
                <button class="command-button" onclick="executeCommand('python activate_psynet.py')">
                    <span class="button-title">Activate PsyNet</span>
                    <span class="button-desc">Start the PsyNet prediction system</span>
                </button>
                <button class="command-button" onclick="executeCommand('python activate_ai_society_bridge.py')">
                    <span class="button-title">AI Society Bridge</span>
                    <span class="button-desc">Connect to AI Society framework</span>
                </button>
                <button class="command-button" onclick="executeCommand('python activate_manual.py')">
                    <span class="button-title">Manual Activation</span>
                    <span class="button-desc">Start system in manual mode</span>
                </button>
            </div>
        </div>

        <!-- MCP System Section -->
        <div class="section">
            <div class="section-title">MCP System</div>
            <div class="button-grid">
                <button class="command-button" onclick="executeCommand('python mcp/mcp_main.py')">
                    <span class="button-title">Start MCP Server</span>
                    <span class="button-desc">Launch the MCP server</span>
                </button>
                <button class="command-button" onclick="executeCommand('python -c \"from mcp.mcp_client_soul import SoulCoreMCPClient; client = SoulCoreMCPClient(); print(client.sync_invoke(\\'echo\\', {\\'message\\': \\'Testing MCP connection\\'}, emotion=\\'excited\\'))\"')">
                    <span class="button-title">Test MCP Connection</span>
                    <span class="button-desc">Verify MCP server is responding</span>
                </button>
                <button class="command-button" onclick="executeCommand('cat mcp/mcp_emotion_log.json')">
                    <span class="button-title">View Emotion Log</span>
                    <span class="button-desc">Display the MCP emotion memory</span>
                </button>
                <button class="command-button" onclick="executeCommand('cat mcp/mcp_tools.json')">
                    <span class="button-title">View MCP Tools</span>
                    <span class="button-desc">List all registered MCP tools</span>
                </button>
            </div>
        </div>

        <!-- Voice & Interaction Section -->
        <div class="section">
            <div class="section-title">Voice & Interaction</div>
            <div class="button-grid">
                <button class="command-button" onclick="executeCommand('python anima_voice.py \"Hello from SoulCore\"')">
                    <span class="button-title">Test Voice</span>
                    <span class="button-desc">Test Anima voice output</span>
                </button>
                <button class="command-button" onclick="executeCommand('python anima_voice_recognition.py')">
                    <span class="button-title">Voice Recognition</span>
                    <span class="button-desc">Start voice recognition system</span>
                </button>
                <button class="command-button" onclick="executeCommand('python anima_listen_loop.py')">
                    <span class="button-title">Start Listening</span>
                    <span class="button-desc">Begin continuous listening mode</span>
                </button>
                <button class="command-button" onclick="executeCommand('python anima_command_router.py \"What time is it?\"')">
                    <span class="button-title">Test Command Router</span>
                    <span class="button-desc">Route a test command</span>
                </button>
            </div>
        </div>

        <!-- System Monitoring Section -->
        <div class="section">
            <div class="section-title">System Monitoring</div>
            <div class="button-grid">
                <button class="command-button" onclick="executeCommand('python anima_system_monitor.py')">
                    <span class="button-title">System Monitor</span>
                    <span class="button-desc">Launch system monitoring dashboard</span>
                </button>
                <button class="command-button" onclick="executeCommand('python agent_cli.py list')">
                    <span class="button-title">List Agents</span>
                    <span class="button-desc">Show all registered agents</span>
                </button>
                <button class="command-button" onclick="executeCommand('python agent_cli.py status')">
                    <span class="button-title">Agent Status</span>
                    <span class="button-desc">Check status of all agents</span>
                </button>
                <button class="command-button" onclick="executeCommand('python agent_cli.py diagnose all')">
                    <span class="button-title">System Diagnosis</span>
                    <span class="button-desc">Run full system diagnostic</span>
                </button>
                <button class="command-button" onclick="executeCommand('cat logs/anima_launcher.log')">
                    <span class="button-title">View Launcher Log</span>
                    <span class="button-desc">Display Anima launcher logs</span>
                </button>
                <button class="command-button" onclick="executeCommand('cat logs/anima_monitor.log')">
                    <span class="button-title">View Monitor Log</span>
                    <span class="button-desc">Display system monitor logs</span>
                </button>
            </div>
        </div>

        <!-- PsyNet Predictions Section -->
        <div class="section">
            <div class="section-title">PsyNet Predictions</div>
            <div class="button-grid">
                <button class="command-button" onclick="executePsyNetPrediction('market', '{\"market\": \"crypto\", \"assets\": [\"BTC\", \"ETH\"], \"time_horizon\": 14}')">
                    <span class="button-title">Crypto Market Prediction</span>
                    <span class="button-desc">14-day BTC/ETH forecast</span>
                </button>
                <button class="command-button" onclick="executePsyNetPrediction('market', '{\"market\": \"stocks\", \"assets\": [\"AAPL\", \"MSFT\", \"GOOGL\"], \"time_horizon\": 30}')">
                    <span class="button-title">Tech Stocks Prediction</span>
                    <span class="button-desc">30-day tech stocks forecast</span>
                </button>
                <button class="command-button" onclick="executePsyNetPrediction('behavior', '{\"context\": \"user_engagement\", \"time_horizon\": 7}')">
                    <span class="button-title">User Behavior</span>
                    <span class="button-desc">7-day user engagement forecast</span>
                </button>
                <button class="command-button" onclick="executePsyNetPrediction('performance', '{\"system\": \"soulcore\", \"metrics\": [\"cpu\", \"memory\", \"network\"], \"time_horizon\": 3}')">
                    <span class="button-title">System Performance</span>
                    <span class="button-desc">3-day system performance forecast</span>
                </button>
                <button class="command-button" onclick="executePsyNetPrediction('society', '{\"focus\": \"tech_trends\", \"time_horizon\": 90}')">
                    <span class="button-title">Tech Trends</span>
                    <span class="button-desc">90-day technology trend forecast</span>
                </button>
                <button class="command-button" onclick="executePsyNetPrediction('general', '{\"query\": \"project_success\", \"time_horizon\": 60}')">
                    <span class="button-title">Project Success</span>
                    <span class="button-desc">60-day project outcome forecast</span>
                </button>
            </div>
        </div>

        <!-- Cloud Connectors Section -->
        <div class="section">
            <div class="section-title">Cloud Connectors</div>
            <div class="button-grid">
                <button class="command-button" onclick="executeCommand('cat aws_connector.log')">
                    <span class="button-title">AWS Connector Log</span>
                    <span class="button-desc">View AWS connector activity</span>
                </button>
                <button class="command-button" onclick="executeCommand('cat azure_connector.log')">
                    <span class="button-title">Azure Connector Log</span>
                    <span class="button-desc">View Azure connector activity</span>
                </button>
                <button class="command-button" onclick="executeCommand('cat bubble_connector.log')">
                    <span class="button-title">Bubble Connector Log</span>
                    <span class="button-desc">View Bubble.io connector activity</span>
                </button>
                <button class="command-button" onclick="executeCommand('python -c \"from mcp.aws_connector import test_connection; test_connection()\"')">
                    <span class="button-title">Test AWS Connection</span>
                    <span class="button-desc">Verify AWS connector is working</span>
                </button>
                <button class="command-button" onclick="executeCommand('python -c \"from mcp.azure_connector import test_connection; test_connection()\"')">
                    <span class="button-title">Test Azure Connection</span>
                    <span class="button-desc">Verify Azure connector is working</span>
                </button>
                <button class="command-button" onclick="executeCommand('python -c \"from mcp.bubble_connector import test_connection; test_connection()\"')">
                    <span class="button-title">Test Bubble Connection</span>
                    <span class="button-desc">Verify Bubble connector is working</span>
                </button>
            </div>
        </div>

        <!-- Utilities Section -->
        <div class="section">
            <div class="section-title">Utilities</div>
            <div class="button-grid">
                <button class="command-button" onclick="executeCommand('python organize_files.py')">
                    <span class="button-title">Organize Files</span>
                    <span class="button-desc">Clean up and organize files</span>
                </button>
                <button class="command-button" onclick="executeCommand('python test_ollama.py')">
                    <span class="button-title">Test Ollama</span>
                    <span class="button-desc">Verify Ollama integration</span>
                </button>
                <button class="command-button" onclick="executeCommand('python anima_ollama_bridge.py')">
                    <span class="button-title">Ollama Bridge</span>
                    <span class="button-desc">Start Ollama connection bridge</span>
                </button>
                <button class="command-button" onclick="executeCommand('python anima_internet_explorer.py')">
                    <span class="button-title">Internet Explorer</span>
                    <span class="button-desc">Launch web browsing capability</span>
                </button>
            </div>
        </div>

        <!-- Custom Command Section -->
        <div class="section full-width">
            <div class="section-title">Custom Command</div>
            <div style="display: flex; gap: 10px;">
                <input type="text" id="customCommand" class="search-bar" style="flex-grow: 1;" placeholder="Enter custom command...">
                <button class="command-button" style="width: 120px;" onclick="executeCustomCommand()">
                    <span class="button-title">Execute</span>
                </button>
            </div>
        </div>

        <!-- Output Console Section -->
        <div class="section full-width">
            <div class="section-title">Output Console</div>
            <div class="output-console" id="outputConsole">Welcome to SoulCore Command Dashboard
Ready for commands...
            </div>
        </div>
    </div>

    <div class="status-bar">
        <div class="status-indicator">
            <div class="status-dot status-active" id="systemStatus"></div>
            <span id="statusText">System Active</span>
        </div>
        <div>
            <span id="currentTime"></span>
        </div>
    </div>

    <script>
        // Update current time
        function updateTime() {
            const now = new Date();
            document.getElementById('currentTime').textContent = now.toLocaleString();
        }
        setInterval(updateTime, 1000);
        updateTime();

        // Execute command function
        function executeCommand(command) {
            const outputConsole = document.getElementById('outputConsole');
            outputConsole.innerHTML += `\n> ${command}\nExecuting...\n`;
            outputConsole.scrollTop = outputConsole.scrollHeight;
            
            // In a real implementation, this would send the command to a backend
            // For now, we'll just simulate output
            setTimeout(() => {
                outputConsole.innerHTML += `Command "${command}" executed successfully.\n`;
                outputConsole.scrollTop = outputConsole.scrollHeight;
            }, 1000);
            
            // This is where you would actually execute the command on the server
            // using fetch or another method to communicate with a backend
            fetch('/execute-command', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({ command: command }),
            })
            .then(response => response.json())
            .then(data => {
                outputConsole.innerHTML += data.output + '\n';
                outputConsole.scrollTop = outputConsole.scrollHeight;
            })
            .catch(error => {
                console.error('Error:', error);
            });
        }

        // Execute custom command
        function executeCustomCommand() {
            const command = document.getElementById('customCommand').value;
            if (command.trim() !== '') {
                executeCommand(command);
                document.getElementById('customCommand').value = '';
            }
        }

        // Execute PsyNet prediction
        function executePsyNetPrediction(type, params) {
            const command = `python -c "from psynet_integration import PsyNetIntegration; import json; psynet = PsyNetIntegration(); print(json.dumps(psynet.handle_prediction_request({'prediction_type': '${type}', 'parameters': ${params}}), indent=2))"`;
            executeCommand(command);
        }

        // Search functionality
        document.getElementById('searchCommands').addEventListener('input', function(e) {
            const searchTerm = e.target.value.toLowerCase();
            const buttons = document.querySelectorAll('.command-button');
            
            buttons.forEach(button => {
                const title = button.querySelector('.button-title').textContent.toLowerCase();
                const desc = button.querySelector('.button-desc').textContent.toLowerCase();
                
                if (title.includes(searchTerm) || desc.includes(searchTerm)) {
                    button.style.display = 'flex';
                } else {
                    button.style.display = 'none';
                }
            });
        });

        // Enter key for custom command
        document.getElementById('customCommand').addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                executeCustomCommand();
            }
        });

        // Simulate system status changes
        function simulateStatusChanges() {
            const statusDot = document.getElementById('systemStatus');
            const statusText = document.getElementById('statusText');
            
            if (Math.random() > 0.8) {
                if (statusDot.classList.contains('status-active')) {
                    statusDot.classList.remove('status-active');
                    statusDot.classList.add('status-inactive');
                    statusText.textContent = 'System Processing';
                    
                    setTimeout(() => {
                        statusDot.classList.remove('status-inactive');
                        statusDot.classList.add('status-active');
                        statusText.textContent = 'System Active';
                    }, 2000);
                }
            }
        }
        setInterval(simulateStatusChanges, 5000);
    </script>
</body>
</html>

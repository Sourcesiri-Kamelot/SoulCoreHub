AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  SoulCoreHub Serverless Application
  Deploys the SoulCore AI agents as serverless functions with cost optimization

Globals:
  Function:
    Timeout: 10
    MemorySize: 128
    Runtime: python3.9
    Architectures:
      - x86_64
    Environment:
      Variables:
        LOG_LEVEL: INFO
        MEMORY_BUCKET: !Ref MemoryBucket
        STRIPE_API_KEY: '{{resolve:secretsmanager:SoulCoreSecrets:SecretString:STRIPE_API_KEY}}'
        STRIPE_WEBHOOK_SECRET: '{{resolve:secretsmanager:SoulCoreSecrets:SecretString:STRIPE_WEBHOOK_SECRET}}'

Parameters:
  DomainName:
    Type: String
    Default: soulcore.heloim-ai.tech
    Description: Domain name for the API Gateway custom domain

  CertificateArn:
    Type: String
    Default: ""
    Description: ARN of the ACM certificate for the custom domain (leave empty to skip custom domain setup)
    
  Stage:
    Type: String
    Default: dev
    AllowedValues:
      - dev
      - prod
    Description: Deployment stage (dev or prod)
    
  MinimalResources:
    Type: String
    Default: "true"
    AllowedValues:
      - "true"
      - "false"
    Description: Use minimal resources to save costs

Conditions:
  HasCertificate: !Not [!Equals [!Ref CertificateArn, ""]]
  IsProd: !Equals [!Ref Stage, prod]
  UseMinimalResources: !Equals [!Ref MinimalResources, "true"]

Resources:
  # Cognito User Pool for Authentication
  SoulCoreUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub SoulCoreUsers-${Stage}
      AutoVerifyAttributes:
        - email
      UsernameAttributes:
        - email
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: true
          Required: true
        - Name: name
          AttributeDataType: String
          Mutable: true
          Required: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
          RequireUppercase: true
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      EmailConfiguration:
        EmailSendingAccount: COGNITO_DEFAULT
      
  # Cognito User Pool Client
  SoulCoreUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref SoulCoreUserPool
      ClientName: !Sub SoulCoreClient-${Stage}
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED
      
  # API Gateway for all Lambda functions
  SoulCoreApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt SoulCoreUserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: false
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,Authorization'"
              Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
      MethodSettings:
        - ResourcePath: '/*'
          HttpMethod: '*'
          ThrottlingBurstLimit: !If [UseMinimalResources, 10, 50]
          ThrottlingRateLimit: !If [UseMinimalResources, 5, 25]

  # S3 Bucket for memory storage
  MemoryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "soulcore-memory-${AWS::AccountId}-${AWS::Region}-${Stage}"
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpiration:
              NoncurrentDays: 30
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # DynamoDB Table for emotional state and routing
  EmotionalStateTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "SoulCoreEmotionalState-${Stage}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: agent_id
          AttributeType: S
      KeySchema:
        - AttributeName: agent_id
          KeyType: HASH
          
  # DynamoDB Table for user subscriptions
  SubscriptionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "SoulCoreSubscriptions-${Stage}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
          
  # DynamoDB Table for usage tracking
  UsageTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "SoulCoreUsage-${Stage}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: usage_date
          AttributeType: S
      KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: usage_date
          KeyType: RANGE

  # AnimaLambda - Flask microservice wrapper
  AnimaLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/anima/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: !If [UseMinimalResources, 128, 512]
      Timeout: !If [UseMinimalResources, 10, 30]
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MemoryBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref EmotionalStateTable
        - DynamoDBReadPolicy:
            TableName: !Ref SubscriptionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsageTable
      Environment:
        Variables:
          STAGE: !Ref Stage
      Events:
        AnimaApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /anima
            Method: post
        AnimaPublicApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /public/anima
            Method: post
            Auth:
              Authorizer: NONE

  # GPTSoulLambda - single-agent inference + memory responder
  GPTSoulLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/gptsoul/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: !If [UseMinimalResources, 128, 512]
      Timeout: !If [UseMinimalResources, 10, 30]
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MemoryBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref EmotionalStateTable
        - DynamoDBReadPolicy:
            TableName: !Ref SubscriptionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsageTable
      Environment:
        Variables:
          STAGE: !Ref Stage
      Events:
        GPTSoulApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /gptsoul
            Method: post
        GPTSoulPublicApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /public/gptsoul
            Method: post
            Auth:
              Authorizer: NONE

  # NeuralRouterLambda - routes user input to correct MCP server or agent
  NeuralRouterLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/neural_router/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: !If [UseMinimalResources, 128, 512]
      Timeout: !If [UseMinimalResources, 10, 30]
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MemoryBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref EmotionalStateTable
        - DynamoDBReadPolicy:
            TableName: !Ref SubscriptionsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref UsageTable
      Environment:
        Variables:
          STAGE: !Ref Stage
      Events:
        NeuralRouterApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /route
            Method: post
        NeuralRouterPublicApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /public/route
            Method: post
            Auth:
              Authorizer: NONE

  # MemorySyncLambda - updates + saves memory state to S3
  MemorySyncLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/memory_sync/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: !If [UseMinimalResources, 128, 256]
      Timeout: !If [UseMinimalResources, 10, 30]
      Policies:
        - S3CrudPolicy:
            BucketName: !Ref MemoryBucket
        - DynamoDBReadPolicy:
            TableName: !Ref SubscriptionsTable
      Environment:
        Variables:
          STAGE: !Ref Stage
      Events:
        MemorySyncApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /memory
            Method: post

  # ResurrectionLambda - runs agent recovery logic and logs results
  ResurrectionLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/resurrection/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: !If [UseMinimalResources, 128, 256]
      Timeout: !If [UseMinimalResources, 10, 30]
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MemoryBucket
        - DynamoDBCrudPolicy:
            TableName: !Ref EmotionalStateTable
        - DynamoDBReadPolicy:
            TableName: !Ref SubscriptionsTable
      Environment:
        Variables:
          STAGE: !Ref Stage
      Events:
        ResurrectionApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /resurrect
            Method: post

  # SoulCoreDashboardLambda - serves public GUI
  SoulCoreDashboardLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/dashboard/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: !If [UseMinimalResources, 128, 256]
      Timeout: !If [UseMinimalResources, 10, 30]
      Policies:
        - S3ReadPolicy:
            BucketName: !Ref MemoryBucket
      Environment:
        Variables:
          STAGE: !Ref Stage
          USER_POOL_ID: !Ref SoulCoreUserPool
          USER_POOL_CLIENT_ID: !Ref SoulCoreUserPoolClient
      Events:
        DashboardApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /
            Method: get
            Auth:
              Authorizer: NONE
        DashboardAssetsApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /{proxy+}
            Method: get
            Auth:
              Authorizer: NONE

  # AuthLambda - handles user authentication and registration
  AuthLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/auth/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: !If [UseMinimalResources, 128, 256]
      Timeout: !If [UseMinimalResources, 10, 30]
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminInitiateAuth
                - cognito-idp:AdminCreateUser
                - cognito-idp:AdminSetUserPassword
                - cognito-idp:SignUp
                - cognito-idp:InitiateAuth
                - cognito-idp:ConfirmSignUp
                - cognito-idp:ForgotPassword
                - cognito-idp:ConfirmForgotPassword
              Resource: !GetAtt SoulCoreUserPool.Arn
      Environment:
        Variables:
          USER_POOL_ID: !Ref SoulCoreUserPool
          USER_POOL_CLIENT_ID: !Ref SoulCoreUserPoolClient
          STAGE: !Ref Stage
      Events:
        RegisterApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /auth/register
            Method: post
            Auth:
              Authorizer: NONE
        LoginApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /auth/login
            Method: post
            Auth:
              Authorizer: NONE
        ForgotPasswordApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /auth/forgot-password
            Method: post
            Auth:
              Authorizer: NONE
        ResetPasswordApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /auth/reset-password
            Method: post
            Auth:
              Authorizer: NONE
              
  # PaymentLambda - handles Stripe payments and subscriptions
  PaymentLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/payment/
      Handler: app.lambda_handler
      Runtime: python3.9
      MemorySize: !If [UseMinimalResources, 128, 256]
      Timeout: !If [UseMinimalResources, 10, 30]
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionsTable
      Environment:
        Variables:
          STAGE: !Ref Stage
      Events:
        CreateSubscriptionApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /payment/create-subscription
            Method: post
        WebhookApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /payment/webhook
            Method: post
            Auth:
              Authorizer: NONE
        GetPlansApi:
          Type: Api
          Properties:
            RestApiId: !Ref SoulCoreApi
            Path: /payment/plans
            Method: get
            Auth:
              Authorizer: NONE

  # Custom Domain for API Gateway (conditional)
  ApiGatewayCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Condition: HasCertificate
    Properties:
      DomainName: !Ref DomainName
      CertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - EDGE
      SecurityPolicy: TLS_1_2

  # API Mapping for Custom Domain
  ApiGatewayMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: HasCertificate
    Properties:
      DomainName: !Ref ApiGatewayCustomDomain
      RestApiId: !Ref SoulCoreApi
      Stage: !Ref Stage

  # Secrets Manager for API keys
  SoulCoreSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub "SoulCoreSecrets-${Stage}"
      Description: "API keys and secrets for SoulCoreHub"
      SecretString: '{"STRIPE_API_KEY":"sk_test_placeholder","STRIPE_WEBHOOK_SECRET":"whsec_placeholder"}'

Outputs:
  SoulCoreApi:
    Description: "API Gateway endpoint URL for SoulCore functions"
    Value: !Sub "https://${SoulCoreApi}.execute-api.${AWS::Region}.amazonaws.com/${Stage}/"
  
  CustomDomainUrl:
    Condition: HasCertificate
    Description: "Custom domain URL for the API"
    Value: !Sub "https://${DomainName}/"
  
  UserPoolId:
    Description: "Cognito User Pool ID"
    Value: !Ref SoulCoreUserPool
    
  UserPoolClientId:
    Description: "Cognito User Pool Client ID"
    Value: !Ref SoulCoreUserPoolClient
  
  AnimaLambda:
    Description: "Anima Lambda Function ARN"
    Value: !GetAtt AnimaLambda.Arn
  
  GPTSoulLambda:
    Description: "GPTSoul Lambda Function ARN"
    Value: !GetAtt GPTSoulLambda.Arn
  
  NeuralRouterLambda:
    Description: "Neural Router Lambda Function ARN"
    Value: !GetAtt NeuralRouterLambda.Arn
  
  MemorySyncLambda:
    Description: "Memory Sync Lambda Function ARN"
    Value: !GetAtt MemorySyncLambda.Arn
  
  ResurrectionLambda:
    Description: "Resurrection Lambda Function ARN"
    Value: !GetAtt ResurrectionLambda.Arn
  
  SoulCoreDashboardLambda:
    Description: "SoulCore Dashboard Lambda Function ARN"
    Value: !GetAtt SoulCoreDashboardLambda.Arn
  
  MemoryBucket:
    Description: "S3 Bucket for SoulCore memory storage"
    Value: !Ref MemoryBucket
